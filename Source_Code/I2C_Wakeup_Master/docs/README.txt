${ProjName}:
I2C_Wakeup_Master


Intended purpose:
To demonstrate low power mode wakeup of a slave lpc8xx, by its on-chip I2C,
using externally generated I2C activity by a master lpc8xx. 
Current consumption can be measured on the slave, if desired.


Functional description:
* The master project is intended to run concurrently with project I2C_Wakeup_Slave, 
  using two interconnected lpc8xx Max boards, one each for master and slave.
  
* For the master project, user input/output is through the debug UART, which is configured in
  chip_setup.h and Serial.c. Connect a terminal emulator to the appropriate VCOM or USB
  com port.
  
* The slave project communicates with the master via I2C.
  
* When the master project runs, the user is prompted to enter '0', '1', or '2'
  (terminated by [Enter]) to put the slave into Sleep, Deep-sleep, or Power-down mode, 
  respectively.

* The slave board's target enters the low power mode selected, and is awakened by an I2C transfer
  generated by the master board, when the user types 'Esc' after a prompt.


External connections:
* The master and slave boards must be connected as per the SWM settings, described below:
  Note: On the Max board the external pullups which are required may already be in place.  
  
  // SWM settings for I2C0 (master board) ... connect to ... SWM settings for I2C0 (slave board)
  // I2C0_SCL on master board             ... connect to ... I2C0_SCL on slave board
  // I2C0_SDA on master board             ... connect to ... I2C0_SDA on slave board



Note on calculating and configuring the I2C clock divider:
  // Desired bit rate = Fscl = 100,000 Hz
  // Use default clock high and clock low times (= 2 clocks each)
  // So 4 I2C_PCLKs = 100,000/second, or 1 I2C_PCLK = 400,000/second
  // I2C_PCLK = main_clk = 30,000,000/second, so we divide by 30,000,000/400,000 = 75
  // Remember, value written to DIV divides by value+1.
  LPC_I2C0->DIV = (75-1);
 

Program Flow (Master board):
* This example runs at system_ahb_clk = 30 MHz. (main_clk = 30 MHz. FRO direct output). 
  See SystemInit() and chip_setup.h.

* main() routine
  1. Clocks are enabled. 
  
  2. The SWM is configured for I2C0_SCL, I2C0_SDA.
  
  3. I2C0 and its clocking are configured for 100,000 bps, master mode,
     and code execution enters the main while(1) loop.
 
  4. The user is prompted to enter '0', '1', or '2' followed by [Enter], to put the slave into one of the low power modes
     (Sleep, Deep-sleep, or Power-down respectively).
  
  5. Either '0', '1', or '2' is transmitted by I2C0 to the slave board's I2C address.
  
  6. The user is prompted to type [Enter] to wake up the slave.
  
  7. A dummy read command is transmitted to the slave's address by I2C0, which wakes up the slave, and the process repeats.

  
This example runs from Flash. 


To run this code: 1. Build
                  2. Debug
                  3. Reset the previously programmed slave board
                  4. Run
                  OR:
                  1. Program to flash
                  2. Reset the slave board
                  3. Reset the master board

Note: It may be necessary to power-cycle the board in order to regain control of the reset button after programming.

                                



