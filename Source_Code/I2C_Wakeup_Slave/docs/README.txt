${ProjName}:
I2C_Wakeup_Slave


Intended purpose:
To demonstrate low power mode wakeup of a slave lpc8xx, by its on-chip I2C,
using externally generated I2C activitiy by a master lpc8xx. 
Current consumption can be measured on the slave, if desired.

Typical low power mode currents at room temperature for a MAX slave board:
* If TARGET_RX on the MAX board is connected via solder-jumper to the LPC11U35, 
  the currents you measure may be higher than the following, which were measured
  at room temperature on one MAX board with the solder-jumper removed.
* Sleep mode        1.12 mA
* Deep Sleep mode   .244 mA
* Power-down mode   1.94 uA


Functional description:
* The slave project is intended to run concurrently with project Example_I2C_Wakeup_Master, 
  using two interconnected lpc8xx Max boards, one each for master and slave.
  
* For the master project, user input/output is through the debug UART, which is configured in
  Serial.c. Connect a terminal emulator (set to 9600/8/N/1) to the appropriate VCOM or USB
  com port.
  
* The slave project communicates with the master via I2C.
  
* When the master project runs, the user is prompted to enter '0', '1', or '2'
  (terminated by [Enter]) to put the slave into Sleep, Deep-sleep, or Power-down mode, 
  respectively.

* The slave board's target enters the low power mode selected, and is awakened by an I2C transfer
  generated by the master board, when the user types 'Esc' after a prompt.


External connections:
* The master and slave boards must be connected as per the SWM settings, described below:
  Note: On the Max board the external pullups which are required may already be in place.  
   
  // SWM settings for I2C0 (master board) ... connect to ... SWM settings for I2C0 (slave board)
  // I2C0_SCL on master board             ... connect to ... I2C0_SCL on slave board
  // I2C0_SDA on master board             ... connect to ... I2C0_SDA on slave board


Note:
* In order to measure the slave board's lpc8xx current consumption, the slave board
  must be modified as follows:
  1. Remove the zero-Ohm resistor shunting JP2.
  2. Install a male header (HDR-1x02) across JP2 to accept the multimeter clip leads.
     When not using a meter across JP2, don't forget to insert a jumper there instead.
  3. Alternatively, measure the voltage drop across resistor R24.


Note on calculating and configuring the I2C clock divider:
  // Desired bit rate = Fscl = 100,000 Hz
  // Use default clock high and clock low times (= 2 clocks each)
  // So 4 I2C_PCLKs = 100,000/second, or 1 I2C_PCLK = 400,000/second
  // I2C_PCLK = SystemClock = 12,000,000/second, so we divide by 12,000,000/400,000 = 30
  // Remember, value written to DIV divides by value+1
  LPC_I2C0->DIV = (30-1);


Program Flow (slave board):
* This example runs from the 12MHz FRO to generate a 12 MHz. main clock.

* main() routine
  1. Clocks are enabled, analog blocks are disabled, internal pull-ups and pull-downs are disabled, GPIOs are made outputs driving '1'. 
  
  2. The SWM is configured for I2C0_SCL, I2C0_SDA on P0.10, P0.11.
  
  3. I2C0 and its clocking are configured for 100,000 bps, slave mode, and it is given a slave address.
  
  4. I2C0 Slave Pending interrupt is enabled, I2C0 interrupt is enabled as wakeup source, and code execution enters the main while(1) loop.
  
  5. When code execution receives handshake from the ISR, the requested low power mode is entered.
  
  6. The next I2C0 transaction that matches the slave's address will wake up the lpc8xx, and the process repeats.
 
  
This example runs from Flash. 


To run this code: 
  1. Program to flash
  2. Reset the slave board
  3. Reset the master board

Note: It may be necessary to power-cycle the board in order to regain control of the reset button after programming.


                                




